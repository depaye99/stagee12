import { type NextRequest, NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"

export async function GET() {
  try {
    const supabase = await createClient()

    // V√©rifier l'authentification
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser()

    if (authError || !user) {
      return NextResponse.json({ error: "Non authentifi√©" }, { status: 401 })
    }

    // R√©cup√©rer le profil stagiaire
    const { data: stagiaire } = await supabase.from("stagiaires").select("id").eq("user_id", user.id).single()

    if (!stagiaire) {
      return NextResponse.json({ error: "Profil stagiaire non trouv√©" }, { status: 404 })
    }

    // R√©cup√©rer les demandes du stagiaire
    const { data: demandes, error } = await supabase
      .from("demandes")
      .select("*")
      .eq("stagiaire_id", stagiaire.id)
      .order("date_demande", { ascending: false })

    if (error) {
      console.error("‚ùå Erreur r√©cup√©ration demandes:", error)
      throw error
    }

    return NextResponse.json({ success: true, data: demandes || [] })
  } catch (error) {
    console.error("üí• Erreur API demandes stagiaire:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient()

    // V√©rifier l'authentification
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser()

    if (authError || !user) {
      console.error("‚ùå Erreur auth:", authError)
      return NextResponse.json({ error: "Non authentifi√©" }, { status: 401 })
    }

    console.log("‚úÖ Utilisateur authentifi√©:", user.email)

    // R√©cup√©rer le profil stagiaire
    const { data: stagiaire, error: stagiaireError } = await supabase
      .from("stagiaires")
      .select("id")
      .eq("user_id", user.id)
      .single()

    if (stagiaireError || !stagiaire) {
      console.error("‚ùå Profil stagiaire non trouv√©:", stagiaireError)
      return NextResponse.json({ error: "Profil stagiaire non trouv√©" }, { status: 404 })
    }

    console.log("‚úÖ Stagiaire trouv√©:", stagiaire.id)

    const body = await request.json()
    const { type, titre, description, documents, periode, congeData, prolongationData } = body

    console.log("üìù Donn√©es re√ßues:", { type, titre })

    // Validation
    if (!type || !titre) {
      return NextResponse.json({ error: "Type et titre requis" }, { status: 400 })
    }

    // Construire la description selon le type
    let finalDescription = description || ""

    if (type === "demande_conge" && congeData) {
      finalDescription = `Demande de cong√© du ${congeData.date_debut} au ${congeData.date_fin}. Motif: ${congeData.description}`
    } else if (type === "demande_prolongation" && prolongationData) {
      finalDescription = `Demande de prolongation de stage. P√©riode d'extension: ${prolongationData.periode_extension}`
    } else if (periode && (type === "stage_academique" || type === "stage_professionnel")) {
      finalDescription = `Demande de ${type.replace("_", " ")}. D√©but pr√©vu: ${periode.jours}/${periode.mois}/${periode.annee}. Dur√©e: ${periode.nombre_mois} mois.`
    }

    // Cr√©er la demande
    const { data: demande, error: demandeError } = await supabase
      .from("demandes")
      .insert([
        {
          stagiaire_id: stagiaire.id,
          type,
          titre,
          description: finalDescription,
          statut: "en_attente",
          date_demande: new Date().toISOString(),
        },
      ])
      .select()
      .single()

    if (demandeError) {
      console.error("‚ùå Erreur cr√©ation demande:", demandeError)
      throw demandeError
    }

    console.log("‚úÖ Demande cr√©√©e:", demande.id)

    // TODO: Enregistrer les documents associ√©s si n√©cessaire
    // TODO: Cr√©er une notification pour les administrateurs

    return NextResponse.json({
      success: true,
      data: demande,
      message: "Demande cr√©√©e avec succ√®s",
    })
  } catch (error) {
    console.error("üí• Erreur cr√©ation demande:", error)
    return NextResponse.json({ error: "Erreur serveur: " + (error as Error).message }, { status: 500 })
  }
}
