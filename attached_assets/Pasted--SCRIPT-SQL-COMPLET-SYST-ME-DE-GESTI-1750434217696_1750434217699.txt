-- =====================================================
-- SCRIPT SQL COMPLET - SYSTÈME DE GESTION DE STAGES
-- =====================================================
-- Ce script configure complètement la base de données
-- pour le système de gestion de stages avec toutes
-- les fonctionnalités requises par l'application

-- Nettoyage initial (optionnel pour reset complet)
DROP TABLE IF EXISTS templates CASCADE;
DROP TABLE IF EXISTS notifications CASCADE;
DROP TABLE IF EXISTS evaluations CASCADE;
DROP TABLE IF EXISTS documents CASCADE;
DROP TABLE IF EXISTS demandes CASCADE;
DROP TABLE IF EXISTS stagiaires CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- Extensions nécessaires
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =====================================================
-- 1. TABLE USERS (Base de tous les utilisateurs)
-- =====================================================
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255) NOT NULL,
  role VARCHAR(50) DEFAULT 'stagiaire' 
    CHECK (role IN ('admin', 'rh', 'tuteur', 'stagiaire')),
  phone VARCHAR(20),
  address TEXT,
  department VARCHAR(100),
  position VARCHAR(100),
  avatar_url TEXT,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  last_login TIMESTAMP WITH TIME ZONE,
  
  -- Champs additionnels pour l'authentification
  password_hash VARCHAR(255), -- Pour l'auth locale si nécessaire
  email_verified BOOLEAN DEFAULT false,
  reset_token VARCHAR(255),
  reset_token_expires TIMESTAMP WITH TIME ZONE,
  
  -- Métadonnées utilisateur
  preferences JSONB DEFAULT '{}',
  settings JSONB DEFAULT '{}',
  profile_completed BOOLEAN DEFAULT false
);

-- =====================================================
-- 2. TABLE STAGIAIRES (Informations spécifiques aux stagiaires)
-- =====================================================
CREATE TABLE stagiaires (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  tuteur_id UUID REFERENCES users(id) ON DELETE SET NULL,
  
  -- Informations du stage
  entreprise VARCHAR(255),
  poste VARCHAR(255),
  date_debut DATE,
  date_fin DATE,
  duree_mois INTEGER GENERATED ALWAYS AS (
    CASE 
      WHEN date_debut IS NOT NULL AND date_fin IS NOT NULL 
      THEN (EXTRACT(YEAR FROM date_fin) - EXTRACT(YEAR FROM date_debut))::INTEGER * 12 + 
           (EXTRACT(MONTH FROM date_fin) - EXTRACT(MONTH FROM date_debut))::INTEGER
      ELSE NULL 
    END
  ) STORED,
  
  -- Statut et suivi
  statut VARCHAR(50) DEFAULT 'actif' 
    CHECK (statut IN ('actif', 'termine', 'suspendu', 'en_attente')),
  notes TEXT,
  objectifs TEXT,
  competences_acquises TEXT[],
  
  -- Informations académiques
  etablissement VARCHAR(255),
  niveau_etude VARCHAR(100),
  specialite VARCHAR(100),
  
  -- Métadonnées
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Contraintes
  CONSTRAINT unique_user_stagiaire UNIQUE(user_id),
  CONSTRAINT valid_dates CHECK (date_fin IS NULL OR date_fin >= date_debut)
);

-- =====================================================
-- 3. TABLE DEMANDES (Toutes les demandes des stagiaires)
-- =====================================================
CREATE TABLE demandes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  stagiaire_id UUID NOT NULL REFERENCES stagiaires(id) ON DELETE CASCADE,
  tuteur_id UUID REFERENCES users(id) ON DELETE SET NULL,
  
  -- Type et contenu de la demande
  type VARCHAR(50) NOT NULL 
    CHECK (type IN ('stage_academique', 'stage_professionnel', 'conge', 
                   'prolongation', 'attestation', 'evaluation', 'changement_tuteur')),
  titre VARCHAR(255) NOT NULL,
  description TEXT,
  justification TEXT,
  
  -- Statut et workflow
  statut VARCHAR(50) DEFAULT 'en_attente' 
    CHECK (statut IN ('en_attente', 'approuvee', 'rejetee', 'en_cours', 'terminee')),
  priorite VARCHAR(20) DEFAULT 'normale' 
    CHECK (priorite IN ('basse', 'normale', 'haute', 'urgente')),
  
  -- Dates importantes
  date_demande TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  date_limite TIMESTAMP WITH TIME ZONE,
  date_reponse TIMESTAMP WITH TIME ZONE,
  date_traitement TIMESTAMP WITH TIME ZONE,
  
  -- Réponse et commentaires
  commentaire_reponse TEXT,
  commentaire_interne TEXT,
  
  -- Documents et métadonnées
  documents_requis TEXT[],
  documents_fournis TEXT[],
  metadata JSONB DEFAULT '{}',
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Contraintes
  CONSTRAINT valid_response_date CHECK (date_reponse IS NULL OR date_reponse >= date_demande)
);

-- =====================================================
-- 4. TABLE DOCUMENTS (Gestion des fichiers)
-- =====================================================
CREATE TABLE documents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  nom VARCHAR(255) NOT NULL,
  nom_original VARCHAR(255),
  type VARCHAR(100) NOT NULL,
  extension VARCHAR(10),
  taille INTEGER NOT NULL,
  url TEXT NOT NULL,
  
  -- Relations
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  demande_id UUID REFERENCES demandes(id) ON DELETE SET NULL,
  stagiaire_id UUID REFERENCES stagiaires(id) ON DELETE SET NULL,
  
  -- Métadonnées
  description TEXT,
  tags TEXT[],
  is_public BOOLEAN DEFAULT false,
  is_template BOOLEAN DEFAULT false,
  version INTEGER DEFAULT 1,
  
  -- Sécurité et accès
  access_level VARCHAR(20) DEFAULT 'private' 
    CHECK (access_level IN ('private', 'internal', 'public')),
  download_count INTEGER DEFAULT 0,
  last_downloaded TIMESTAMP WITH TIME ZONE,
  
  -- Audit
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  deleted_at TIMESTAMP WITH TIME ZONE,
  
  -- Contraintes
  CONSTRAINT positive_size CHECK (taille > 0)
);

-- =====================================================
-- 5. TABLE EVALUATIONS (Évaluations des stagiaires)
-- =====================================================
CREATE TABLE evaluations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  stagiaire_id UUID NOT NULL REFERENCES stagiaires(id) ON DELETE CASCADE,
  evaluateur_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  
  -- Type et période d'évaluation
  type VARCHAR(50) NOT NULL 
    CHECK (type IN ('mi_parcours', 'finale', 'auto_evaluation', 'mensuelle', 'projet')),
  periode VARCHAR(100),
  date_evaluation DATE NOT NULL,
  
  -- Notes détaillées (sur 20)
  note_globale DECIMAL(4,2) CHECK (note_globale >= 0 AND note_globale <= 20),
  competences_techniques DECIMAL(4,2) CHECK (competences_techniques >= 0 AND competences_techniques <= 20),
  competences_relationnelles DECIMAL(4,2) CHECK (competences_relationnelles >= 0 AND competences_relationnelles <= 20),
  autonomie DECIMAL(4,2) CHECK (autonomie >= 0 AND autonomie <= 20),
  initiative DECIMAL(4,2) CHECK (initiative >= 0 AND initiative <= 20),
  ponctualite DECIMAL(4,2) CHECK (ponctualite >= 0 AND ponctualite <= 20),
  
  -- Évaluations qualitatives
  points_forts TEXT,
  points_amelioration TEXT,
  commentaires TEXT,
  recommandations TEXT,
  objectifs_suivants TEXT,
  
  -- Métadonnées
  duree_evaluation INTEGER, -- en minutes
  is_validated BOOLEAN DEFAULT false,
  validated_by UUID REFERENCES users(id),
  validated_at TIMESTAMP WITH TIME ZONE,
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Contraintes
  CONSTRAINT unique_evaluation_per_period UNIQUE(stagiaire_id, type, date_evaluation)
);

-- =====================================================
-- 6. TABLE NOTIFICATIONS (Système de notifications)
-- =====================================================
CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  
  -- Contenu de la notification
  titre VARCHAR(255) NOT NULL,
  message TEXT NOT NULL,
  type VARCHAR(50) DEFAULT 'info' 
    CHECK (type IN ('info', 'success', 'warning', 'error', 'reminder')),
  
  -- Gestion de l'état
  lu BOOLEAN DEFAULT false,
  date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  date_lecture TIMESTAMP WITH TIME ZONE,
  expire_at TIMESTAMP WITH TIME ZONE,
  
  -- Relations et contexte
  related_type VARCHAR(50), -- 'demande', 'evaluation', 'document', etc.
  related_id UUID,
  action_url TEXT,
  action_label VARCHAR(100),
  
  -- Métadonnées
  priority VARCHAR(20) DEFAULT 'normal' 
    CHECK (priority IN ('low', 'normal', 'high', 'critical')),
  category VARCHAR(50),
  metadata JSONB DEFAULT '{}',
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 7. TABLE TEMPLATES (Modèles de documents et emails)
-- =====================================================
CREATE TABLE templates (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  nom VARCHAR(255) NOT NULL,
  type VARCHAR(50) NOT NULL 
    CHECK (type IN ('email', 'document', 'rapport', 'contrat', 'attestation')),
  
  -- Contenu du template
  contenu TEXT NOT NULL,
  subject VARCHAR(255), -- Pour les emails
  variables TEXT[], -- Variables disponibles comme {{nom}}, {{date}}, etc.
  
  -- Métadonnées
  description TEXT,
  category VARCHAR(100),
  tags TEXT[],
  is_active BOOLEAN DEFAULT true,
  is_default BOOLEAN DEFAULT false,
  version VARCHAR(20) DEFAULT '1.0',
  
  -- Gestion des accès
  created_by UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  visibility VARCHAR(20) DEFAULT 'private' 
    CHECK (visibility IN ('private', 'department', 'public')),
  
  -- Statistiques d'usage
  usage_count INTEGER DEFAULT 0,
  last_used TIMESTAMP WITH TIME ZONE,
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Contraintes
  CONSTRAINT unique_default_per_type EXCLUDE (type WITH =) WHERE (is_default = true)
);

-- =====================================================
-- 8. TABLE AUDIT_LOG (Traçabilité des actions)
-- =====================================================
CREATE TABLE audit_log (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  
  -- Action effectuée
  action VARCHAR(100) NOT NULL, -- 'CREATE', 'UPDATE', 'DELETE', 'LOGIN', etc.
  table_name VARCHAR(100), -- Table affectée
  record_id UUID, -- ID de l'enregistrement affecté
  
  -- Détails de l'action
  old_values JSONB,
  new_values JSONB,
  changes JSONB, -- Résumé des changements
  
  -- Contexte
  ip_address INET,
  user_agent TEXT,
  session_id VARCHAR(255),
  request_id VARCHAR(255),
  
  -- Métadonnées
  description TEXT,
  severity VARCHAR(20) DEFAULT 'info' 
    CHECK (severity IN ('info', 'warning', 'error', 'critical')),
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 9. INDEXES POUR PERFORMANCE
-- =====================================================

-- Index sur users
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_active ON users(is_active);
CREATE INDEX idx_users_department ON users(department);

-- Index sur stagiaires
CREATE INDEX idx_stagiaires_user_id ON stagiaires(user_id);
CREATE INDEX idx_stagiaires_tuteur_id ON stagiaires(tuteur_id);
CREATE INDEX idx_stagiaires_statut ON stagiaires(statut);
CREATE INDEX idx_stagiaires_dates ON stagiaires(date_debut, date_fin);
CREATE INDEX idx_stagiaires_entreprise ON stagiaires(entreprise);

-- Index sur demandes
CREATE INDEX idx_demandes_stagiaire_id ON demandes(stagiaire_id);
CREATE INDEX idx_demandes_tuteur_id ON demandes(tuteur_id);
CREATE INDEX idx_demandes_statut ON demandes(statut);
CREATE INDEX idx_demandes_type ON demandes(type);
CREATE INDEX idx_demandes_date ON demandes(date_demande);
CREATE INDEX idx_demandes_priorite ON demandes(priorite);

-- Index sur documents
CREATE INDEX idx_documents_user_id ON documents(user_id);
CREATE INDEX idx_documents_demande_id ON documents(demande_id);
CREATE INDEX idx_documents_type ON documents(type);
CREATE INDEX idx_documents_public ON documents(is_public);

-- Index sur evaluations
CREATE INDEX idx_evaluations_stagiaire_id ON evaluations(stagiaire_id);
CREATE INDEX idx_evaluations_evaluateur_id ON evaluations(evaluateur_id);
CREATE INDEX idx_evaluations_type ON evaluations(type);
CREATE INDEX idx_evaluations_date ON evaluations(date_evaluation);

-- Index sur notifications
CREATE INDEX idx_notifications_user_id ON notifications(user_id);
CREATE INDEX idx_notifications_lu ON notifications(lu);
CREATE INDEX idx_notifications_type ON notifications(type);
CREATE INDEX idx_notifications_date ON notifications(date);
CREATE INDEX idx_notifications_user_unread ON notifications(user_id, lu) WHERE lu = false;

-- Index sur templates
CREATE INDEX idx_templates_type ON templates(type);
CREATE INDEX idx_templates_active ON templates(is_active);
CREATE INDEX idx_templates_created_by ON templates(created_by);

-- Index sur audit_log
CREATE INDEX idx_audit_log_user_id ON audit_log(user_id);
CREATE INDEX idx_audit_log_table_record ON audit_log(table_name, record_id);
CREATE INDEX idx_audit_log_action ON audit_log(action);
CREATE INDEX idx_audit_log_date ON audit_log(created_at);

-- =====================================================
-- 10. FONCTIONS UTILITAIRES
-- =====================================================

-- Fonction pour mettre à jour updated_at automatiquement
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers pour updated_at
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_stagiaires_updated_at BEFORE UPDATE ON stagiaires
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_demandes_updated_at BEFORE UPDATE ON demandes
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_documents_updated_at BEFORE UPDATE ON documents
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_evaluations_updated_at BEFORE UPDATE ON evaluations
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_templates_updated_at BEFORE UPDATE ON templates
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Fonction pour créer des notifications automatiques
CREATE OR REPLACE FUNCTION create_notification(
    p_user_id UUID,
    p_titre VARCHAR(255),
    p_message TEXT,
    p_type VARCHAR(50) DEFAULT 'info',
    p_related_type VARCHAR(50) DEFAULT NULL,
    p_related_id UUID DEFAULT NULL
)
RETURNS UUID AS $$
DECLARE
    notification_id UUID;
BEGIN
    INSERT INTO notifications (user_id, titre, message, type, related_type, related_id)
    VALUES (p_user_id, p_titre, p_message, p_type, p_related_type, p_related_id)
    RETURNING id INTO notification_id;
    
    RETURN notification_id;
END;
$$ LANGUAGE plpgsql;

-- Fonction pour obtenir les statistiques du dashboard
CREATE OR REPLACE FUNCTION get_dashboard_stats(p_user_id UUID DEFAULT NULL, p_role VARCHAR(50) DEFAULT NULL)
RETURNS TABLE (
    stagiaires_total BIGINT,
    stagiaires_actifs BIGINT,
    demandes_en_attente BIGINT,
    demandes_total BIGINT,
    documents_total BIGINT,
    evaluations_total BIGINT,
    notifications_non_lues BIGINT
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        (SELECT COUNT(*) FROM stagiaires),
        (SELECT COUNT(*) FROM stagiaires WHERE statut = 'actif'),
        (SELECT COUNT(*) FROM demandes WHERE statut = 'en_attente'),
        (SELECT COUNT(*) FROM demandes),
        (SELECT COUNT(*) FROM documents),
        (SELECT COUNT(*) FROM evaluations),
        (SELECT COUNT(*) FROM notifications WHERE user_id = p_user_id AND lu = false);
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- 11. VUES UTILES
-- =====================================================

-- Vue des stagiaires avec leurs informations complètes
CREATE VIEW v_stagiaires_complet AS
SELECT 
    s.*,
    u.name as stagiaire_name,
    u.email as stagiaire_email,
    u.phone as stagiaire_phone,
    t.name as tuteur_name,
    t.email as tuteur_email,
    CASE 
        WHEN s.date_fin IS NOT NULL AND s.date_fin < CURRENT_DATE 
        THEN 'expire'
        ELSE s.statut 
    END as statut_reel
FROM stagiaires s
JOIN users u ON s.user_id = u.id
LEFT JOIN users t ON s.tuteur_id = t.id;

-- Vue des demandes avec informations relationnelles
CREATE VIEW v_demandes_complet AS
SELECT 
    d.*,
    s.entreprise,
    s.poste as poste_stagiaire,
    u.name as stagiaire_name,
    u.email as stagiaire_email,
    t.name as tuteur_name,
    t.email as tuteur_email,
    EXTRACT(DAY FROM (CURRENT_TIMESTAMP - d.date_demande)) as jours_depuis_demande
FROM demandes d
JOIN stagiaires s ON d.stagiaire_id = s.id
JOIN users u ON s.user_id = u.id
LEFT JOIN users t ON d.tuteur_id = t.id;

-- =====================================================
-- 12. DONNÉES DE TEST (OPTIONNEL)
-- =====================================================

-- Insertion des utilisateurs de test
INSERT INTO users (id, email, name, role, department, is_active, profile_completed) VALUES
('550e8400-e29b-41d4-a716-446655440001', 'admin@stagegestion.com', 'Admin Principal', 'admin', 'Direction', true, true),
('550e8400-e29b-41d4-a716-446655440002', 'rh@stagegestion.com', 'Responsable RH', 'rh', 'Ressources Humaines', true, true),
('550e8400-e29b-41d4-a716-446655440003', 'tuteur1@stagegestion.com', 'Jean Dupont', 'tuteur', 'Informatique', true, true),
('550e8400-e29b-41d4-a716-446655440004', 'tuteur2@stagegestion.com', 'Marie Martin', 'tuteur', 'Marketing', true, true),
('550e8400-e29b-41d4-a716-446655440005', 'stagiaire1@stagegestion.com', 'Pierre Bernard', 'stagiaire', NULL, true, true),
('550e8400-e29b-41d4-a716-446655440006', 'stagiaire2@stagegestion.com', 'Sophie Leroy', 'stagiaire', NULL, true, true)
ON CONFLICT (email) DO NOTHING;

-- Insertion des stagiaires de test
INSERT INTO stagiaires (user_id, tuteur_id, entreprise, poste, date_debut, date_fin, statut, etablissement, niveau_etude) VALUES
('550e8400-e29b-41d4-a716-446655440005', '550e8400-e29b-41d4-a716-446655440003', 'TechCorp', 'Développeur Junior', '2024-01-15', '2024-06-15', 'actif', 'Université Paris Tech', 'Master 2'),
('550e8400-e29b-41d4-a716-446655440006', '550e8400-e29b-41d4-a716-446655440004', 'MarketPro', 'Assistant Marketing', '2024-02-01', '2024-07-31', 'actif', 'ESSEC Business School', 'Master 1')
ON CONFLICT (user_id) DO NOTHING;

-- Templates de base
INSERT INTO templates (nom, type, contenu, variables, is_active, is_default, created_by) VALUES
('Bienvenue Stagiaire', 'email', 
'Bonjour {{nom}},\n\nNous vous souhaitons la bienvenue pour votre stage au sein de {{entreprise}}.\n\nVotre tuteur {{tuteur}} vous contactera prochainement.\n\nCordialement,\nL''équipe RH', 
ARRAY['nom', 'entreprise', 'tuteur'], true, true, '550e8400-e29b-41d4-a716-446655440002'),

('Attestation de Stage', 'document',
'ATTESTATION DE STAGE\n\nJe soussigné(e), certifie que {{nom_stagiaire}} a effectué un stage dans notre entreprise {{entreprise}} du {{date_debut}} au {{date_fin}}.\n\nPoste occupé: {{poste}}\nTuteur: {{tuteur}}\n\nFait à {{lieu}}, le {{date_emission}}',
ARRAY['nom_stagiaire', 'entreprise', 'date_debut', 'date_fin', 'poste', 'tuteur', 'lieu', 'date_emission'], true, true, '550e8400-e29b-41d4-a716-446655440002')
ON CONFLICT DO NOTHING;

-- =====================================================
-- 13. CONFIGURATION FINALE
-- =====================================================

-- Désactiver RLS pour le développement (ATTENTION: À activer en production)
ALTER TABLE users DISABLE ROW LEVEL SECURITY;
ALTER TABLE stagiaires DISABLE ROW LEVEL SECURITY;
ALTER TABLE demandes DISABLE ROW LEVEL SECURITY;
ALTER TABLE documents DISABLE ROW LEVEL SECURITY;
ALTER TABLE evaluations DISABLE ROW LEVEL SECURITY;
ALTER TABLE notifications DISABLE ROW LEVEL SECURITY;
ALTER TABLE templates DISABLE ROW LEVEL SECURITY;
ALTER TABLE audit_log DISABLE ROW LEVEL SECURITY;

-- Message de confirmation
SELECT 'Base de données configurée avec succès!' as message,
       'Tables créées: ' || COUNT(*) as tables_count
FROM information_schema.tables 
WHERE table_schema = 'public' AND table_type = 'BASE TABLE';

-- Afficher un résumé des données
SELECT 'RÉSUMÉ DES DONNÉES:' as info;
SELECT 'Utilisateurs: ' || COUNT(*) FROM users;
SELECT 'Stagiaires: ' || COUNT(*) FROM stagiaires;
SELECT 'Templates: ' || COUNT(*) FROM templates;

SELECT 'Configuration terminée - Système prêt à l''emploi!' as final_message;
